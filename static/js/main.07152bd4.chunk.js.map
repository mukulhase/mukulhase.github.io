{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","theme","createMuiTheme","palette","primary","lightBlue","secondary","teal","App","ThemeProvider","Container","maxWidth","className","Grid","container","direction","justify","alignItems","style","height","spacing","item","flexGrow","width","gyroscope","tiltAngleXInitial","tiltAngleYInitial","trackOnWindow","id","option","file","logo","animTimingFunction","type","onReady","console","log","callback","myVivus","getStatus","reset","play","ButtonGroup","orientation","color","Button","variant","endIcon","map","url","key","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,iWCmBrCC,EAAQC,YAAe,CACzBC,QAAS,CACLC,QAASC,IACTC,UAAWC,OA2GJC,MAvGf,WAOI,OACI,kBAACC,EAAA,EAAD,CAAeR,MAAOA,GAClB,kBAACS,EAAA,EAAD,CAAWC,SAAU,KAAMC,UAAU,OACjC,yBAAKA,UAAU,cACX,kBAACC,EAAA,EAAD,CACIC,WAAS,EACTC,UAAU,SACVC,QAAQ,WACRC,WAAW,SACXC,MAAO,CACHC,OAAO,QAEXC,QAAS,GAET,kBAACP,EAAA,EAAD,CAAMQ,MAAI,EAACP,WAAS,EACdC,UAAU,SACVC,QAAQ,SACRC,WAAW,SACXC,MAAO,CACHI,SAAS,IAGf,kBAACT,EAAA,EAAD,CACIQ,MAAI,EACJH,MAAO,CAACK,MAAO,SAEf,kBAAC,IAAD,CACIC,WAAW,EACXC,kBAAmB,GACnBC,kBAAmB,GACnBC,eAAe,GAEf,kBAACd,EAAA,EAAD,CACIC,WAAS,EACTE,QAAQ,SACRI,QAAS,GAET,kBAACP,EAAA,EAAD,CAAMQ,MAAI,EAACH,MAAO,CAACK,MAAM,SACrB,kBAAC,IAAD,CACIK,GAAG,MACHC,OAAQ,CACJC,KAAMC,IACNC,mBAAoB,OACpBC,KAAM,WACNC,QAASC,QAAQC,KAErBxB,UAAU,WACVyB,SAAU,SAACC,GACqB,QAAxBA,EAAQC,aACRD,EAAQE,QAAQC,WAKhC,kBAAC5B,EAAA,EAAD,CAAMQ,MAAI,GACN,kBAACqB,EAAA,EAAD,CACIC,YAAY,WACZC,MAAM,WAEN,kBAACC,EAAA,EAAD,CACIC,QAAQ,WACRC,QAAS,kBAAC,IAAD,OAFb,YAMA,kBAACF,EAAA,EAAD,CACIC,QAAQ,WACRC,QAAS,kBAAC,IAAD,OAFb,WAMA,kBAACF,EAAA,EAAD,CACIC,QAAQ,WACRC,QAAS,kBAAC,IAAD,OAFb,qBAaxB,kBAAClC,EAAA,EAAD,CAAMQ,MAAI,GACN,6BA3Fb,CACP,sCACA,+BACA,gDACA,2DAwF8B2B,KAAI,SAAAC,GAAG,OAAE,0BAAMC,IAAKD,EAAK/B,MAAO,CAACiC,QAAQ,IAAI,kBAAC,aAAD,CAAYF,IAAKA,eC3GhFG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.07152bd4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7a2a0e24.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {SocialIcon} from 'react-social-icons';\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport ReactVivus from 'react-vivus';\r\nimport Tilt from 'react-parallax-tilt';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNoteOutlined\";\r\nimport WorkIcon from \"@material-ui/icons/WorkOutlineOutlined\";\r\nimport EmojiObjectsOutlinedIcon from '@material-ui/icons/EmojiObjectsOutlined';\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport lightBlue from '@material-ui/core/colors/lightBlue';\r\nimport teal from \"@material-ui/core/colors/teal\";\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: lightBlue,\r\n        secondary: teal\r\n    },\r\n});\r\n\r\nfunction App() {\r\n    let urls = [\r\n        \"https://www.facebook.com/mukul.hase\",\r\n        \"https://github.com/mukulhase\",\r\n        \"https://www.linkedin.com/in/mukul-hase-42069/\",\r\n        \"https://open.spotify.com/user/213i4eofdg43qmfvheiso7tza\"\r\n    ];\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Container maxWidth={\"md\"} className=\"App\">\r\n                <div className=\"App-center\">\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"flex-end\"\r\n                        alignItems=\"center\"\r\n                        style={{\r\n                            height:\"100%\"\r\n                        }}\r\n                        spacing={5}\r\n                    >\r\n                        <Grid item container\r\n                              direction=\"column\"\r\n                              justify=\"center\"\r\n                              alignItems=\"center\"\r\n                              style={{\r\n                                  flexGrow:1\r\n                              }}\r\n                        >\r\n                            <Grid\r\n                                item\r\n                                style={{width: \"100%\"}}\r\n                            >\r\n                                <Tilt\r\n                                    gyroscope={true}\r\n                                    tiltAngleXInitial={10}\r\n                                    tiltAngleYInitial={10}\r\n                                    trackOnWindow={true}\r\n                                >\r\n                                    <Grid\r\n                                        container\r\n                                        justify=\"center\"\r\n                                        spacing={5}\r\n                                    >\r\n                                        <Grid item style={{width:\"100%\"}}>\r\n                                            <ReactVivus\r\n                                                id=\"foo\"\r\n                                                option={{\r\n                                                    file: logo,\r\n                                                    animTimingFunction: 'EASE',\r\n                                                    type: 'scenario',\r\n                                                    onReady: console.log,\r\n                                                }}\r\n                                                className=\"App-logo\"\r\n                                                callback={(myVivus: any) => {\r\n                                                    if (myVivus.getStatus() === 'end') {\r\n                                                        myVivus.reset().play();\r\n                                                    }\r\n                                                }}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                            <ButtonGroup\r\n                                                orientation=\"vertical\"\r\n                                                color=\"primary\"\r\n                                            >\r\n                                                <Button\r\n                                                    variant=\"outlined\"\r\n                                                    endIcon={<MusicNoteIcon />}\r\n                                                >\r\n                                                    My Music\r\n                                                </Button>\r\n                                                <Button\r\n                                                    variant=\"outlined\"\r\n                                                    endIcon={<WorkIcon />}\r\n                                                >\r\n                                                    My Work\r\n                                                </Button>\r\n                                                <Button\r\n                                                    variant=\"outlined\"\r\n                                                    endIcon={<EmojiObjectsOutlinedIcon />}\r\n                                                >\r\n                                                    My Thoughts\r\n                                                </Button>\r\n                                            </ButtonGroup>\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                </Tilt>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <div>\r\n                                {urls.map(url=><span key={url} style={{padding:5}}><SocialIcon url={url}></SocialIcon></span>)}\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Container>\r\n        </ThemeProvider>\r\n           );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}